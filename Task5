import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;

class Course {
    String code;
    String title;
    String description;
    int capacity;
    String schedule;

    public Course(String code, String title, String description, int capacity, String schedule) {
        this.code = code;
        this.title = title;
        this.description = description;
        this.capacity = capacity;
        this.schedule = schedule;
    }
}

class Student {
    String studentID;
    String name;
    ArrayList<Course> registeredCourses;

    public Student(String studentID, String name) {
        this.studentID = studentID;
        this.name = name;
        this.registeredCourses = new ArrayList<>();
    }
}

class CourseDatabase {
    ArrayList<Course> courses;

    public CourseDatabase() {
        this.courses = new ArrayList<>();
    }

    public void addCourse(Course course) {
        courses.add(course);
    }

    public void removeCourse(Course course) {
        courses.remove(course);
    }
}

class StudentDatabase {
    HashMap<String, Student> students;

    public StudentDatabase() {
        this.students = new HashMap<>();
    }

    public void addStudent(Student student) {
        students.put(student.studentID, student);
    }

    public void removeStudent(Student student) {
        students.remove(student.studentID);
    }
}

public class CourseRegistrationSystem {
    public static void main(String[] args) {
        CourseDatabase courseDB = new CourseDatabase();
        StudentDatabase studentDB = new StudentDatabase();

        // Adding sample courses
        Course c1 = new Course("CSE101", "Introduction to Computer Science", "Basic concepts of computer science", 50, "Mon/Wed 10:00-11:30");
        Course c2 = new Course("ENG201", "English Literature", "Study of various literary works", 40, "Tue/Thu 13:00-14:30");
        courseDB.addCourse(c1);
        courseDB.addCourse(c2);

        // Adding sample students
        Student s1 = new Student("101", "Alice");
        Student s2 = new Student("102", "Bob");
        studentDB.addStudent(s1);
        studentDB.addStudent(s2);

        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\nCourse Registration System");
            System.out.println("1. Display Course Listing");
            System.out.println("2. Register for a Course");
            System.out.println("3. Drop a Course");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    displayCourseListing(courseDB);
                    break;
                case 2:
                    registerForCourse(courseDB, studentDB, scanner);
                    break;
                case 3:
                    dropCourse(studentDB, scanner);
                    break;
                case 4:
                    System.out.println("Exiting...");
                    scanner.close();
                    System.exit(0);
                    break;
                default:
                    System.out.println("Invalid choice! Please enter a valid option.");
            }
        }
    }

    private static void displayCourseListing(CourseDatabase courseDB) {
        System.out.println("\nCourse Listing:");
        for (Course course : courseDB.courses) {
            System.out.println(course.code + ": " + course.title);
            System.out.println("Description: " + course.description);
            System.out.println("Available Slots: " + (course.capacity - course.registeredStudents.size()));
            System.out.println("Schedule: " + course.schedule);
            System.out.println();
        }
    }

    private static void registerForCourse(CourseDatabase courseDB, StudentDatabase studentDB, Scanner scanner) {
        System.out.print("Enter student ID: ");
        String studentID = scanner.next();
        System.out.print("Enter course code to register: ");
        String courseCode = scanner.next();

        Student student = studentDB.students.get(studentID);
        if (student == null) {
            System.out.println("Student not found!");
            return;
        }

        Course course = findCourseByCode(courseDB, courseCode);
        if (course == null) {
            System.out.println("Course not found!");
            return;
        }

        if (course.capacity - course.registeredStudents.size() <= 0) {
            System.out.println("Sorry, the course is already full!");
            return;
        }

        student.registeredCourses.add(course);
        course.registeredStudents.add(student);
        System.out.println("Course registration successful!");
    }

    private static void dropCourse(StudentDatabase studentDB, Scanner scanner) {
        System.out.print("Enter student ID: ");
        String studentID = scanner.next();

        Student student = studentDB.students.get(studentID);
        if (student == null) {
            System.out.println("Student not found!");
            return;
        }

        if (student.registeredCourses.isEmpty()) {
            System.out.println("No courses registered!");
            return;
        }

        System.out.println("Registered Courses:");
        for (Course course : student.registeredCourses) {
            System.out.println(course.code + ": " + course.title);
        }

        System.out.print("Enter course code to drop: ");
        String courseCode = scanner.next();

        for (Course course : student.registeredCourses) {
            if (course.code.equals(courseCode)) {
                student.registeredCourses.remove(course);
                course.registeredStudents.remove(student);
                System.out.println("Course dropped successfully!");
                return;
            }
        }

        System.out.println("Course not found in registered courses!");
    }

    private static Course findCourseByCode(CourseDatabase courseDB, String code) {
        for (Course course : courseDB.courses) {
            if (course.code.equals(code)) {
                return course;
            }
        }
        return null;
    }
}
